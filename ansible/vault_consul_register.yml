---
- name: Check if Vault's client certificate for Consul exists
  stat:
    path: "{{ vault_tls_dir }}/consul-cert.crt"
  register: vault_consul_cert
  changed_when: false

  # must be logged in to bw and Vault
- name: Create Vault client certificate for Consul
  block:
    - name: Issue new certificate
      shell:
        cmd: |
          vault write -format=json pki_int/issue/client \
          "common_name=vault-client.dc1.consul" \
          "ttl=24h" \
      environment:
        VAULT_ADDR: "https://{{ cluster_server_ip }}:8200"
      register: vault_consul_tls_raw

    - set_fact:
        vault_consul_tls_json: "{{ vault_consul_tls_raw.stdout | from_json }}"
      when: vault_consul_tls_raw is defined and vault_consul_tls_raw.stdout is defined

    - name: Create certificate
      copy:
        content: "{{ vault_consul_tls_json.data.certificate }}"
        dest: "{{ vault_tls_dir }}/consul-cert.crt"
        mode: 0600
        owner: vault
        group: vault
      when: vault_consul_tls_json is defined and vault_consul_tls_json.data is defined

    - name: Create private key
      copy:
        content: "{{ vault_consul_tls_json.data.private_key }}"
        dest: "{{ vault_tls_dir }}/consul-key.pem"
        mode: 0400
        owner: vault
        group: vault
      when: vault_consul_tls_json is defined and vault_consul_tls_json.data is defined

    - name: Create CA
      copy:
        content: "{{ vault_consul_tls_json.data.issuing_ca }}"
        dest: "{{ vault_tls_dir }}/consul-ca.crt"
        mode: 0640
        owner: vault
        group: vault
      when: vault_consul_tls_json is defined and vault_consul_tls_json.data is defined
  when:
    - "'server' in group_names"
    - vault_consul_cert is defined
    - not vault_consul_cert.stat.exists

- name: Vault service registration
  blockinfile:
    path: "{{ vault_config_dir }}/vault.hcl"
    marker: "# {mark} Consul Service Registration"
    block: |
      service_registration "consul" {
        address       = "{{ cluster_server_ip }}:8501"
        scheme        = "https"
        tls_ca_file   = "{{ vault_tls_dir }}/consul-ca.crt"
        tls_cert_file = "{{ vault_tls_dir }}/consul-cert.crt"
        tls_key_file  = "{{ vault_tls_dir }}/consul-key.pem"
      }
  when: "'server' in group_names"

- name: Add TLS template stanza for Vault client to consul-template
  blockinfile:
    path: "{{ consul_template_dir }}/consul_template.hcl"
    marker: "# {mark} Vault Consul TLS"
    validate: consul-template -config=%s -parse-only
    block: |
      template {
        contents = <<EOF
      {{ '{{' }} with pkiCert "pki_int/issue/client" "common_name=vault-client.dc1.consul" "ttl=24h" {{ '}}' }}
      {{ '{{' }} .Cert {{ '}}' }}
      {{ '{{' }} if .CA {{ '}}' }}
      {{ '{{' }} .CA | writeToFile "{{ vault_tls_dir }}/consul-ca.crt" "vault" "vault" "0600" {{ '}}' }}
      {{ '{{' }} end {{ '}}' }}
      {{ '{{' }} if .Key {{ '}}' }}
      {{ '{{' }} .Key | writeToFile "{{ vault_tls_dir }}/consul-key.pem" "vault" "vault" "0400" {{ '}}' }}
      {{ '{{' }} end {{ '}}' }}
      {{ '{{' }} end {{ '}}' }}
      EOF
        destination = "{{ vault_tls_dir }}/consul-cert.crt"
        perms = 0600
        user = "vault"
        group = "vault"
        command = "date && if systemctl is-active vault; then service vault reload; fi"
      }
  when: "'server' in group_names"

- name: Reload consul-template
  systemd:
    name: consul_template
    state: reloaded
  when: "'server' in group_names"

- name: Restart Vault
  systemd:
    name: vault
    state: restarted
  when: "'server' in group_names"

- name: Unseal restarted Vault
  block:
    - name: Get unseal key from Bitwarden
      script: "./roles/vault/files/bw_get.sh 'Vault Unseal Key' {{ bw_password }}"
      register: vault_unseal_key_raw

    - set_fact:
        vault_unseal_key_json: "{{ vault_unseal_key_raw.stdout | from_json }}"

    - name: Unseal Vault
      shell:
        cmd: "vault operator unseal --format json {{ vault_unseal_key_json.data.data }}"
      register: vault_unseal_operation
      when:
        - vault_unseal_key_json is defined
        - vault_unseal_key_json.data.data is defined
        - vault_unseal_key_json.success
      changed_when: false
      failed_when: vault_unseal_operation.rc == 1

- name: Wait for Vault port
  wait_for:
    port: 8200
    state: started
