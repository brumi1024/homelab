#!/bin/bash

set -euo pipefail -o errtrace

DISK="{{ nas_backup_partition }}"
DISK_UUID="$(lsblk -nlo UUID $DISK)"
MOUNT_DIR="{{ nas_backup_mount_dir }}"
AUTORESTIC_CONFIG_FILE="{{ autorestic_config_dir }}/.autorestic.yml"
AUTORESTIC_LOG_FILE="{{ autorestic_log_file }}"

if [ ! -e "$AUTORESTIC_LOG_FILE" ]; then
    mkdir -p "$(dirname $AUTORESTIC_LOG_FILE)"
    touch "$AUTORESTIC_LOG_FILE"
fi

# redirect output
exec &> >(tee -a "${AUTORESTIC_LOG_FILE}")

RESTORE_DIR="{{ nas_backup_restore_dir }}"
TMP_DIR="$(mktemp -d)"

cleanup() {
    echo "Removing temp directories"
    rm -r "$TMP_DIR"

    echo "Unmounting backup disk $DISK"
    umount "$MOUNT_DIR"
}

error_exit() {
    echo >&2 "[ERROR] Exited with status $1 at line $2"
}

trap 'cleanup' EXIT
trap 'error_exit $? $LINENO' ERR

DATE="$(date '+%Y-%m-%d %H:%M:%S')"

echo "==========================================="
echo "| Starting backup on $DATE | "
echo "==========================================="
SECONDS=0

echo "Mounting backup disk $DISK"
mount "/dev/disk/by-uuid/$DISK_UUID" "$MOUNT_DIR"

autorestic -c "$AUTORESTIC_CONFIG_FILE" backup -av --ci

echo "Running backup checks"
autorestic -c "$AUTORESTIC_CONFIG_FILE" exec -av --ci -- check --read-data-subset=1%

echo "Running restore tests"
autorestic -c "$AUTORESTIC_CONFIG_FILE" restore \
    --location all \
    --include "$RESTORE_DIR" \
    --to "$TMP_DIR" \
    -v --ci

RESTORED_FILES="$(cd "$RESTORE_DIR" && find . -type f -printf '%f\n')"
for file in $RESTORED_FILES; do
    diff "$RESTORE_DIR/$file" "${TMP_DIR}${RESTORE_DIR}/$file"
done
echo "Restore tests successful!"

duration=$SECONDS
echo "Backup on $DATE completed in $(( duration / 60 ))m $(( duration % 60 ))s"
