---
- name: Create NAS backup mount directory
  file:
    path: "{{ nas_backup_mount_dir }}"
    mode: 0755
    owner: root
    group: root
    state: directory

- name: Create NAS backup restore directory
  file:
    path: "{{ nas_backup_restore_dir }}"
    mode: 0755
    owner: "{{ nas_user }}"
    group: "{{ nas_user }}"
    state: directory

- name: Create NAS backup exporter directory
  file:
    path: "{{ nas_backup_export_dir }}"
    mode: 0755
    owner: "{{ nas_user }}"
    group: "{{ nas_user }}"
    state: directory

- name: Check backup partition exists
  block:
    - assert:
        that: nas_backup_partition != ""
        fail_msg: "Variable nas_backup_partition must be defined"

    - set_fact:
        partitions: "{{ partitions|default([]) + ansible_devices[item].partitions.keys()|list }}"
      loop: "{{ ansible_devices.keys() | list }}"

    - assert:
        that: nas_backup_partition | regex_search("/dev/(.*)", "\\1") | first in partitions
        fail_msg: "{{ nas_backup_partition }} not found"

- name: Copy autorestic.yml
  template:
    src: "autorestic.yml.j2"
    dest: "{{ autorestic_config_dir }}/.autorestic.yml"
    owner: root
    group: root
    mode: 0644

# TODO populate autorestic.env
- name: Copy autorestic.env
  copy:
    src: "autorestic.env.example"
    dest: "{{ autorestic_config_dir }}/.autorestic.env"
    owner: root
    group: root
    mode: 0600

- name: Create autorestic log directory
  file:
    path: "{{ autorestic_log_dir }}"
    owner: root
    group: root
    mode: 0755
    state: directory

- name: Touch autorestic log file
  file:
    path: "{{ autorestic_log_file }}"
    owner: root
    group: root
    mode: 0644
    state: touch

# - name: Validate autorestic config
#   command: autorestic --config {{ autorestic_config_dir }}/.autorestic.yml check
#   changed_when: false

- name: Copy backup scripts
  template:
    src: "{{ item }}.j2"
    dest: "{{ autorestic_bin_dir }}/{{ item }}"
    owner: root
    group: root
    mode: 0755
  with_items:
    - autorestic-backup
    - generate-restore-test-files

- name: Copy exporter script
  copy:
    src: "backup-exporter"
    dest: "{{ autorestic_bin_dir }}/backup-exporter"
    owner: root
    group: root
    mode: 0755

- name: Copy backup systemd service and timer
  template:
    src: "{{ item }}.j2"
    dest: "/etc/systemd/system/{{ item }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - backup.service
    - backup.timer
  notify: daemon-reload backup.service

- name: Setup logrotate for autorestic.log
  template:
    src: "logrotate-autorestic.j2"
    dest: "/etc/logrotate.d/autorestic"
    owner: root
    group: root
    mode: 0644

- name: Start and enable backup.timer
  systemd:
    name: backup.timer
    state: started
    enabled: true
  when: not ansible_check_mode

- name: Enable backup.service
  systemd:
    name: backup.service
    enabled: true
  when: not ansible_check_mode
