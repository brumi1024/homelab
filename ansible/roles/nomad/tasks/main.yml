---
- name: Check for both Nomad server and client enabled
  fail:
    msg: "Cannot setup both Nomad server and client on the same node."
  when:
    - nomad_server | bool
    - nomad_client | bool

- name: Create Nomad directories
  file:
    path: "{{ item }}"
    mode: 0755
    owner: nomad
    group: nomad
    state: directory
  with_items:
    - "{{ nomad_config_dir }}"
    - "{{ nomad_data_dir }}"

- name: Create Nomad TLS directory
  file:
    path: "{{ nomad_tls_dir }}"
    mode: 0700
    owner: nomad
    group: nomad
    state: directory

- name: Install CNI plugins
  import_tasks: cni_plugins.yml
  when: nomad_client | bool

- set_fact:
  local_cert_dir: "{{ lookup('pipe', 'git rev-parse --show-toplevel') }}/certs"

- name: Check if {{ local_cert_dir }} exists
  block:
    - stat:
        path: "{{ local_cert_dir }}"

    - assert:
        that:
          - local_cert_dir.stat.isdir is defined
          - local_cert_dir.stat.isdir
        fail_msg: "{{ local_cert_dir }} does not exist"

- name: Login with Ansible auth cert
  become: false
  uri:
    url: "{{ nomad_vault_addr }}/v1/auth/cert/login"
    method: POST
    client_cert: "{{ local_cert_dir }}/ansible.crt"
    client_key: "{{ local_cert_dir }}/ansible_key.pem"
    ca_path: "{{ local_cert_dir }}/vault-ca.crt"
    body: "{ \"name\": \"ansible\" }"
    body_format: json
    return_content: true
  register: nomad_ansible_token_raw
  no_log: true
  changed_when: false
  delegate_to: localhost

- set_fact:
    nomad_ansible_token_json: "{{ nomad_ansible_token_raw.content | from_json }}"
  when:
    - nomad_ansible_token_raw is defined
    - nomad_ansible_token_raw.content is defined

- set_fact:
    nomad_ansible_token: "{{ nomad_ansible_token_json.auth.client_token }}"
  when:
    - nomad_ansible_token_json.auth is defined
    - nomad_ansible_token_json.auth.client_token is defined

- fail:
    msg: Vault token was not obtained successfully
  when: nomad_ansible_token is not defined

- name: Setup Nomad Gossip Encryption
  import_tasks: gossip.yml
  when: nomad_server | bool

- name: Setup Nomad TLS
  import_tasks: tls.yml

- name: Setup Vault integration
  import_tasks: vault_integration.yml
  when:
    - nomad_server | bool
    - nomad_vault_integration | bool

- name: Copy service file
  template:
    src: "nomad.service.j2"
    dest: "/etc/systemd/system/nomad.service"
    mode: 0644
    owner: root
    group: root
  notify:
    - restart nomad

- name: Copy Nomad config files
  block:
    - name: Common config
      template:
        src: "nomad.hcl.j2"
        dest: "{{ nomad_config_dir }}/nomad.hcl"
        mode: 0644
        owner: nomad
        group: nomad

    - name: Server-only config
      template:
        src: "server.hcl.j2"
        dest: "{{ nomad_config_dir }}/server.hcl"
        mode: 0644
        owner: nomad
        group: nomad
      when: nomad_server | bool

    - name: Client-only config
      template:
        src: "client.hcl.j2"
        dest: "{{ nomad_config_dir }}/client.hcl"
        mode: 0644
        owner: nomad
        group: nomad
      when: nomad_client | bool
  notify:
    - reload nomad

- name: Start Nomad
  systemd:
    name: nomad
    state: started
    enabled: true
    daemon_reload: true
  register: nomad_started

# Wait for Nomad to start before flushing handlers. If Nomad is reloaded by
# consul-template to quickly after starting, it can enter a killed state that requires
# it to be restarted manually.
- name: Wait for Nomad port
  wait_for:
    port: 4646
    state: started

# Apply all service and config changes
- name: Restart Nomad if there are changes
  meta: flush_handlers

- name: Wait for Nomad port
  wait_for:
    port: 4646
    state: started
