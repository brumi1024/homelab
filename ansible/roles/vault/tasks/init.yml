---
# A single unseal key is sufficient for our purposes
- name: Initialize Vault
  command: vault operator init -key-shares=1 -key-threshold=1 -format=json
  register: vault_init_raw

- set_fact:
    vault_init_json: "{{ vault_init_raw.stdout | from_json }}"
  when: vault_init_raw is defined and vault_init_raw.stdout is defined

# The initialization of Vault outputs the root token and unseal key(s).
# We can choose to output these secrets to the local Ansible host, store them in
# Bitwarden or both.

# Storing the secrets on the local filesystem is only recommended as a temporary
# measure (to verify the secrets), or for testing and development. Ensure the local
# secrets are stored in the safe location or deleted afterwards.

# If we are using Bitwarden, the Bitwarden CLI tool must be installed and configured.
# The bw_password variable must also be defined and will be used to login to your
# Bitwarden account.

- name: Store unseal keys and root token on local filesystem
  become: false
  copy:
    content: |
      Unseal keys: {{ vault_init_json.unseal_keys_hex }}
      Root token: {{ vault_init_json.root_token }}
    dest: "{{ vault_secrets_file }}"
    mode: 0400
  delegate_to: localhost
  when:
    - vault_store_bw == false
    - vault_init_json is defined
    - vault_init_json.unseal_keys_hex is defined
    - vault_init_json.root_token is defined

# TODO make bw scripts more robust
# TODO store list of unseal keys by using secure note
- name: Store unseal keys in Bitwarden
  script: "bw_store.sh 'Vault Unseal Key' {{ vault_init_json.unseal_keys_hex[0] }} {{ bw_password }}"
  when:
    - vault_store_bw == true
    - vault_init_json is defined
    - vault_init_json.unseal_keys_hex is defined
  register: bw_vault_unseal_key
  failed_when: bw_vault_unseal_key.stdout == "bw get failed"

# - debug:
#     var: bw_vault_unseal_key.stdout

- name: Store root token in Bitwarden
  script: "bw_store.sh 'Vault Root Token' {{ vault_init_json.root_token }} {{ bw_password }}"
  when:
    - vault_store_bw == true
    - vault_init_json is defined
    - vault_init_json.root_token is defined
  register: bw_vault_root_token
  failed_when: bw_vault_root_token.stdout == "bw get failed"

# - debug:
#     var: bw_vault_root_token.stdout

- name: Unseal Vault
  shell:
    cmd: "vault operator unseal --format json {{ vault_init_json.unseal_keys_hex[0] }}"
  register: vault_unseal_raw
  when:
    - vault_status_json is defined
    - vault_status_json.sealed
  changed_when: false
  failed_when: vault_unseal_raw.rc == 1

- set_fact:
    vault_root_token: "{{ vault_init_json.root_token }}"
  when:
    - vault_init_json is defined
    - vault_init_json.root_token is defined

- name: Login with root token
  shell:
    cmd: vault login --format json {{ vault_root_token }}
  register: vault_login_raw
  changed_when: false
  failed_when: vault_login_raw.rc != 0

- name: Check Vault post-login status
  command: vault status -format=json
  register: vault_post_status_raw
  changed_when: false
  failed_when: vault_post_status_raw.rc == 1

- set_fact:
    vault_post_status_json: "{{ vault_post_status_raw.stdout | from_json }}"
  when: vault_post_status_raw.stdout is defined

- name: Vault post-login status
  debug:
    var: vault_post_status_json
  when: vault_post_status_json is defined

# See terraform/vault for resources
# Note that Terraform must be installed on Ansible host

- set_fact:
    vault_terraform_dir: "{{ lookup('pipe', 'git rev-parse --show-toplevel') }}/terraform/vault"

- set_fact:
    vault_terraform_cert_dir: "{{ lookup('pipe', 'git rev-parse --show-toplevel') }}/certs"

- name: Copy Vault CA cert to Ansible host
  fetch:
    src: "{{ vault_ca_cert_dir }}/ca.crt"
    dest: "{{ vault_terraform_cert_dir }}/vault-ca.crt"
    flat: true

# Clear any existing state from previous Vault server or Molecule testing. THIS CAN
# DELETE IMPORTANT DATA! Take care when running tests when a state file already exists.

- name: Delete existing state from Terraform if any
  become: false
  community.general.terraform:
    project_path: "{{ vault_terraform_dir }}"
    workspace: "{{ vault_terraform_workspace }}"
    state: absent
    variables:
      vault_token: "{{ vault_root_token }}"
      vault_address: "https://{{ ansible_default_ipv4.address }}:8200"
      vault_ca_cert_file: "{{ vault_terraform_cert_dir }}/vault-ca.crt"
  delegate_to: localhost

- name: Provision Vault secrets with Terraform provider
  become: false
  community.general.terraform:
    project_path: "{{ vault_terraform_dir }}"
    workspace: "{{ vault_terraform_workspace }}"
    state: present
    force_init: true
    check_destroy: true
    variables:
      vault_token: "{{ vault_root_token }}"
      vault_address: "https://{{ ansible_default_ipv4.address }}:8200"
      vault_ca_cert_file: "{{ vault_terraform_cert_dir }}/vault-ca.crt"
      vault_audit_path: "{{ vault_log_file }}"
      admin_password: "{{ vault_admin_password }}"
      kvuser_password: "{{ vault_kvuser_password }}"
  register: vault_terraform_output
  no_log: true
  delegate_to: localhost

- debug:
    msg: "{{ vault_terraform_output.stdout }}"
  when: vault_terraform_output is defined
