---
- name: Install docker module
  pip:
    name: docker
    state: present

- name: Get $USER
  command:
    cmd: "echo $USER"
  register: user
  changed_when: false

- name: Clone compose-stacks repo
  git:
    repo: "{{ stacks_repo_url }}"
    dest: "{{ stacks_directory }}"
    version: "{{ stacks_version }}"

- name: Create .env file
  copy:
    src: "{{ stacks_directory }}/.env.example"
    dest: "{{ stacks_directory }}/.env"
    remote_src: true
    force: false  # do not overwrite if exist
  register: env_file

- name: Populate environment variables
  lineinfile:
    path: "{{ stacks_directory }}/.env"
    regexp: "^{{ item.key }}"
    line: "{{ item.key }}{{ item.value }}"
    state: present
  with_items:
    - { key: "DOMAIN_NAME=", value: "{{ domain_name }}" }
    - { key: "CA_EMAIL=", value: "{{ ca_email }}" }
  when: env_file.changed

# traefik setup
- name: Create acme directory
  file:
    path: "{{ stacks_directory }}/traefik/acme"
    state: directory

- name: Create acme.json
  file:
    path: "{{ stacks_directory }}/traefik/acme/acme.json"
    state: touch
    owner: "{{ user.stdout }}"
    group: "{{ user.stdout }}"
    mode: '0600'
    modification_time: preserve
    access_time: preserve

# - name: Start Traefik to get SSL certificates
#   community.docker.docker_compose:
#     project_src: "{{ stacks_directory }}/traefik"
#     state: present
#
# - name: Check acme.json

# linkding, miniflux needs to copy their [service].env file
# better to encrypt secrets with SOPS
# - name: Start compose services
#   community.docker.docker_compose:
#     project_src: "{{ stacks_directory }}/{{ item }}"
#     state: present
#   with_items: "{{ started_stacks }}"
